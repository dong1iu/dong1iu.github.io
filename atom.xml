<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://dong1iu.github.io</id>
    <title>动动栋栋</title>
    <updated>2021-06-07T16:39:04.931Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://dong1iu.github.io"/>
    <link rel="self" href="https://dong1iu.github.io/atom.xml"/>
    <subtitle>南风知我意 吹梦到西洲</subtitle>
    <logo>https://dong1iu.github.io/images/avatar.png</logo>
    <icon>https://dong1iu.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 动动栋栋</rights>
    <entry>
        <title type="html"><![CDATA[配置V2Ray+ws+tls]]></title>
        <id>https://dong1iu.github.io/post/pei-zhi-v2raywstls/</id>
        <link href="https://dong1iu.github.io/post/pei-zhi-v2raywstls/">
        </link>
        <updated>2021-06-07T15:33:10.000Z</updated>
        <content type="html"><![CDATA[<p><strong>写在最前面</strong></p>
<p><strong>关于V2Ray的文章有很多，本来不提供任何一键脚本，基于官网提供的教程一步一步手动配置，因此本文的目的在于交流和记录自己配置的过程本身。希望大家愉快的借助上网工具好好学习，不要参与政治事件，关你什么事呢？</strong></p>
<h1 id="一-购买vps">一、购买VPS</h1>
<p>作者不提供任何购买链接，只是提醒大家不要贪图便宜购买非常廉价的服务器。便宜的服务器容易被封IP，也容易跑路，人工客服的质量也不行，建议大家尽量选择大厂的服务，不要贪小便宜，不然后期简直式折磨自己。另外，建议大家多购置几个备用，被封了你才知道难受！！！</p>
<h1 id="二-连接到vps">二、连接到VPS</h1>
<p>连接的方式很多，Windows下你可以使用常见的<a href="https://www.netsarang.com/en/xshell-download/">XShell个人版</a>和<a href="https://mobaxterm.mobatek.net/download.html">mobaxterm家庭版</a>，MacOS下你可以使用<a href="https://electerm.github.io/electerm/">electerm</a>。他们的使用方法大同小异，这里我展示如何使用electerm连接到你的服务器。</p>
<p>打开书签，添加你的连接配置</p>
<figure data-type="image" tabindex="1"><img src="https://dong1iu.github.io/post-images/1623080999671.png" alt="" loading="lazy"></figure>
<p>输入你的服务器的IP，你的登录名字（一般默认为root）和密码</p>
<figure data-type="image" tabindex="2"><img src="https://dong1iu.github.io/post-images/1623081008544.png" alt="" loading="lazy"></figure>
<p>测试连接，如果成功，点击保存并连接</p>
<figure data-type="image" tabindex="3"><img src="https://dong1iu.github.io/post-images/1623081016451.png" alt="" loading="lazy"></figure>
<p>其他的客户端操作请大家移步其他博客，已经有还多帖子介绍，就不重复造轮子了。</p>
<h1 id="三-安装v2ray">三、安装V2Ray</h1>
<p>使用官方的安装脚本安装V2Ray</p>
<pre><code class="language-bash">bash &lt;(curl -L https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.sh)
</code></pre>
<blockquote>
<p>新版和旧版的文件结构是不同的<br>
在旧版中配置文件位于：/etc/v2ray/config.json<br>
在新版中位于：/usr/local/etc/v2ray/config.json<br>
日志文件一般推荐在/var/log/v2ray/access.log和/var/log/v2ray/error.log</p>
</blockquote>
<p>V2Ray常用命令</p>
<pre><code class="language-bash">v2ray [-version] [-test] [-config=config.json] [-format=json]
# test可以用来测试一个config.json是否编写正确

v2ctl uuid 
# 生成新的uuid
</code></pre>
<p>注意V2Ray对时间有严格的要求，客户端和服务器的时差不能超过2分钟，注意矫正服务器的时间。</p>
<p>查看时间</p>
<pre><code class="language-bash">date -R
</code></pre>
<p>修改时间</p>
<pre><code class="language-bash">date -s &quot;2000-01-01 00:00:00&quot;
</code></pre>
<h1 id="三-安装常用的小工具">三、安装常用的小工具</h1>
<pre><code class="language-bash">apt-get install vim
apt-get install curl
apt-get install htop

#  如果无法安装
sudo apt upgrade
</code></pre>
<h1 id="四-安装ufw">四、安装ufw</h1>
<pre><code class="language-bash">sudo apt-get install ufw
</code></pre>
<p>开放80端口和443端口</p>
<pre><code class="language-bash">ufw allow 80
ufw allow 443
ufw reload
</code></pre>
<blockquote>
<p>注意ubuntu默认没有开启ufw，开启时请以前打开22端口的权限，否则无法ssh到机器</p>
</blockquote>
<h1 id="五-安装caddy">五、安装Caddy</h1>
<p>不同机器的安装方式不同，这里我只提供Ubuntu18.04的安装方法，其他的机器的安装请参考Caddy官网的文档</p>
<pre><code class="language-bash"># 逐条运行
echo &quot;deb [trusted=yes] https://apt.fury.io/caddy/ /&quot; \
    | sudo tee -a /etc/apt/sources.list.d/caddy-fury.list
sudo apt update
sudo apt install caddy
</code></pre>
<h1 id="六-配置caddy">六、配置Caddy</h1>
<p>配置模板</p>
<p>修改Caddy配置文件</p>
<pre><code class="language-bash">vim /etc/caddy/Caddyflie
</code></pre>
<p>修改配置为以下内容</p>
<pre><code class="language-json">mydomain.me { 
    log {
        output file /var/log/caddy/caddy.log
    }
    tls {
        protocols tls1.2 tls1.3
        ciphers TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256
        curves x25519
    }
    @v2ray_websocket {
        path /ray 
        header Connection *Upgrade*
        header Upgrade websocket
    }
    reverse_proxy @v2ray_websocket localhost:10000
}
</code></pre>
<ul>
<li><em>mydomain.me</em> → 你的域名 需要将你的域名解析到服务器</li>
<li><em>path /ray</em> → 路径，需要在v2ray和caddy的配置文件中保持一致</li>
<li><em>localhost:10000</em> → 转发到端口 需要和v2ray中监听本地的端口一致</li>
</ul>
<h1 id="七-配置v2ray">七、配置V2Ray</h1>
<pre><code class="language-bash">vim /usr/local/etc/v2ray/config.json
</code></pre>
<p>修改配置为以下，并替换关键内容（uuid和端口，和caddy中反向代理的端口保持一致）</p>
<pre><code class="language-json">{
  &quot;inbounds&quot;: [
    {
      &quot;port&quot;: 10000,
      &quot;listen&quot;:&quot;127.0.0.1&quot;,//只监听 127.0.0.1，避免除本机外的机器探测到开放了 10000 端口
      &quot;protocol&quot;: &quot;vmess&quot;,
      &quot;settings&quot;: {
        &quot;clients&quot;: [
          {
            &quot;id&quot;: &quot;b831381d-6324-4d53-ad4f-8cda48b30811&quot;,
            &quot;alterId&quot;: 64
          }
        ]
      },
      &quot;streamSettings&quot;: {
        &quot;network&quot;: &quot;ws&quot;,
        &quot;wsSettings&quot;: {
        &quot;path&quot;: &quot;/ray&quot;
        }
      }
    }
  ],
  &quot;outbounds&quot;: [
    {
      &quot;protocol&quot;: &quot;freedom&quot;,
      &quot;settings&quot;: {}
    }
  ]
}
</code></pre>
<h1 id="八-将你的域名解析到服务器">八、将你的域名解析到服务器</h1>
<p>推荐到<a href="namesilo.com">namesilo</a>（收费）和<a href="freenom.com">freenom</a>（免费）购买域名</p>
<figure data-type="image" tabindex="4"><img src="https://dong1iu.github.io/post-images/1623083243877.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="5"><img src="https://dong1iu.github.io/post-images/1623083484619.png" alt="" loading="lazy"></figure>
<h1 id="九-重启v2ray和caddy">九、重启V2ray和Caddy</h1>
<pre><code class="language-bash">systemctl restart v2ray
systemctl restart caddy
</code></pre>
<h1 id="十-开起bbr加速你的网络">十、开起BBR，加速你的网络</h1>
<p>Ubuntu 1804下启用BBR非常简单，这也是我使用该系统的原因，并且该系统的文档很容易搜到，推荐给新手使用</p>
<pre><code class="language-bash"># 因为ubuntu18.04 的内核满足bbr的要求所以ubuntu开启bbr比较简单
# 修改系统变量
echo &quot;net.core.default_qdisc=fq&quot; &gt;&gt; /etc/sysctl.conf
echo &quot;net.ipv4.tcp_congestion_control=bbr&quot; &gt;&gt; /etc/sysctl.conf

# 保存生效
sysctl -p

# 查看BBR是否启动 lsmod命令用于显示已经加载到内核中的模块的状态信息。
sysctl net.ipv4.tcp_available_congestion_control

lsmod | grep bbr
</code></pre>
<h1 id="十一-使用客户端连接">十一、使用客户端连接</h1>
<ul>
<li>Windows：推荐V2rayN</li>
<li>安卓：推荐V2rayNG</li>
<li>IOS：推荐Kitsunebi</li>
<li>Mac：推荐V2rayX</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[mac安装MySQL]]></title>
        <id>https://dong1iu.github.io/post/mac-an-zhuang-mysql/</id>
        <link href="https://dong1iu.github.io/post/mac-an-zhuang-mysql/">
        </link>
        <updated>2021-06-07T15:03:59.000Z</updated>
        <content type="html"><![CDATA[<h1 id="一-下载mysql">一、下载MySQL</h1>
<p><a href="https://dev.mysql.com/downloads/mysql/">官网地址</a></p>
<p>下载macOS版本的dmg文件</p>
<figure data-type="image" tabindex="1"><img src="https://dong1iu.github.io/post-images/1623078467775.png" alt="" loading="lazy"></figure>
<p>一路下一步，同意</p>
<p>设置密码</p>
<h1 id="二-修改环境变量">二、修改环境变量</h1>
<p>修改配置文件</p>
<pre><code class="language-bash">sudo vim ~/.bash_profile
</code></pre>
<p>在配置文件中添加以下内容</p>
<pre><code class="language-bash"># mysql
export PATH=$PATH:/usr/local/mysql/bin

alias mysql='/usr/local/mysql/bin/mysql'
alias mysqladmin='/usr/local/mysql/bin/mysqladmin'
</code></pre>
<p>检查文件是否生效</p>
<pre><code class="language-bash">source ~/.bash_profile
</code></pre>
<h1 id="三-测试数据库">三、测试数据库</h1>
<p>查看MySQL版本</p>
<pre><code class="language-bash">mysql -V
</code></pre>
<p>连接数据库</p>
<pre><code class="language-bash">mysql -u root -p
</code></pre>
<p>退出连接的数据库</p>
<pre><code class="language-mysql">exit
</code></pre>
<h1 id="四-管理服务">四、管理服务</h1>
<p>管理服务</p>
<figure data-type="image" tabindex="2"><img src="https://dong1iu.github.io/post-images/1623078989184.png" alt="" loading="lazy"></figure>
<p>设置开机启动和关闭服务</p>
<figure data-type="image" tabindex="3"><img src="https://dong1iu.github.io/post-images/1623079019588.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[感知机PLA]]></title>
        <id>https://dong1iu.github.io/post/gan-zhi-ji-pla/</id>
        <link href="https://dong1iu.github.io/post/gan-zhi-ji-pla/">
        </link>
        <updated>2021-06-07T10:47:35.000Z</updated>
        <content type="html"><![CDATA[<h1 id="pla-感知机">PLA 感知机</h1>
<h1 id="一-the-learning-problem">一、The Learning Problem</h1>
<p>本质</p>
<ol>
<li>存在某种现在的模式去学习（so performance measure can be improved）</li>
<li>不能被简单定义（so ML is needed）</li>
<li>there is data about the pattern</li>
</ol>
<h1 id="二-perceptron-learning-algorithmpla">二、Perceptron Learning Algorithm（PLA）</h1>
<p>图示<br>
<img src="https://dong1iu.github.io/post-images/1623062895684.png" alt="" loading="lazy"></p>
<h2 id="一线形可分">（一）线形可分</h2>
<p>图总第一个为线性可分，经典的PLA只能处理完全线性可分的类型。<br>
<img src="https://dong1iu.github.io/post-images/1623062905822.png" alt="" loading="lazy"></p>
<h2 id="二感知机算法图解">（二）感知机算法图解</h2>
<p>图解<br>
<img src="https://dong1iu.github.io/post-images/1623062913237.png" alt="" loading="lazy"></p>
<figure data-type="image" tabindex="1"><img src="https://dong1iu.github.io/post-images/1623062919845.png" alt="" loading="lazy"></figure>
<h2 id="三如何选择g">（三）如何选择g</h2>
<p>迭代w<br>
<img src="https://dong1iu.github.io/post-images/1623062935084.png" alt="" loading="lazy"></p>
<p>从某些初始值开始，一步步迭代到损失最小</p>
<h2 id="四迭代更新">（四）迭代更新</h2>
<p>图示<br>
<img src="https://dong1iu.github.io/post-images/1623062941847.png" alt="" loading="lazy"></p>
<p>误分类 → <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>i</mi><mi>g</mi><mi>n</mi><mo>(</mo><msubsup><mi>w</mi><mi>t</mi><mi>T</mi></msubsup><msub><mi>x</mi><mrow><mi>n</mi><mo>(</mo><mi>t</mi><mo>)</mo></mrow></msub><mo>)</mo><mi mathvariant="normal">≠</mi><msub><mi>y</mi><mrow><mi>n</mi><mo>(</mo><mi>t</mi><mo>)</mo></mrow></msub></mrow><annotation encoding="application/x-tex">sign(w_t^Tx_{n(t)})\neq{y_{n(t)}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1965309999999998em;vertical-align:-0.3551999999999999em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">t</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7857599999999999em;vertical-align:-0.3551999999999999em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">t</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span></span></span></span></span> → 更新步 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>w</mi><mrow><mi>t</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><msub><mi>w</mi><mi>t</mi></msub><mo>+</mo><msub><mi>y</mi><mrow><mi>n</mi><mo>(</mo><mi>t</mi><mo>)</mo></mrow></msub><msub><mi>x</mi><mrow><mi>n</mi><mo>(</mo><mi>t</mi><mo>)</mo></mrow></msub></mrow><annotation encoding="application/x-tex">w_{t+1}=w_t+y_{n(t)}x_{n(t)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.638891em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7857599999999999em;vertical-align:-0.3551999999999999em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">t</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">t</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span></span></span></span></p>
<p>证明<br>
<img src="https://dong1iu.github.io/post-images/1623062950108.png" alt="" loading="lazy"></p>
<figure data-type="image" tabindex="2"><img src="https://dong1iu.github.io/post-images/1623062957694.png" alt="" loading="lazy"></figure>
<p>w的更新意味着分类超平面的移动</p>
<h2 id="五-收敛性证明">（五）、收敛性证明</h2>
<p>我们已经知道更新w向量方法，但是，这样的更新方法是否收敛？</p>
<p>证明过程</p>
<ol>
<li>
<p>假设线形可分的数据集<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="script">D</mi></mrow><annotation encoding="application/x-tex">\mathcal{D}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.02778em;">D</span></span></span></span></span>能被向量<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>w</mi><mi>f</mi></msub></mrow><annotation encoding="application/x-tex">w_f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>完美划分</p>
<p>因此<br>
<img src="https://dong1iu.github.io/post-images/1623062968114.png" alt="" loading="lazy"></p>
<p>从而<br>
<img src="https://dong1iu.github.io/post-images/1623062976143.png" alt="" loading="lazy"></p>
</li>
<li>
<p>更新<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>w</mi><mi>f</mi></msub></mrow><annotation encoding="application/x-tex">w_f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>意味着发生了错误，也就是<br>
<img src="https://dong1iu.github.io/post-images/1623062983717.png" alt="" loading="lazy"></p>
<p>从而<br>
<img src="https://dong1iu.github.io/post-images/1623062989593.png" alt="" loading="lazy"></p>
</li>
<li>
<p>证明<br>
<img src="https://dong1iu.github.io/post-images/1623062996830.png" alt="" loading="lazy"></p>
<p>证明过程<br>
<img src="https://dong1iu.github.io/post-images/1623063003431.png" alt="" loading="lazy"></p>
</li>
</ol>
<p>收敛性的说明</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>θ</mi><mo>(</mo><mi>T</mi><mo>)</mo><mo>=</mo><mfrac><mrow><msubsup><mi>w</mi><mi>f</mi><mi>T</mi></msubsup><msub><mi>w</mi><mi>T</mi></msub></mrow><mrow><mo>∥</mo><msub><mi>w</mi><mi>f</mi></msub><mo>∥</mo><mo>⋅</mo><mo>∥</mo><msub><mi>w</mi><mi>T</mi></msub><mo>∥</mo></mrow></mfrac><mo>≥</mo><msqrt><mi>T</mi></msqrt><mo>⋅</mo><mi>c</mi><mi>o</mi><mi>n</mi><mi>s</mi><mi>t</mi><mi>a</mi><mi>n</mi><mi>t</mi><mo>=</mo><mi>ρ</mi><mi mathvariant="normal">/</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">cos\theta(T) = \frac{w_f^Tw_T}{\lVert w_f \lVert \cdot \lVert w_T \lVert} \geq \sqrt{T}\cdot constant=\rho/R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.798865em;vertical-align:-0.5480799999999999em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.250785em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">∥</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:-0.02691em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29011428571428566em;"><span></span></span></span></span></span></span><span class="mopen mtight">∥</span><span class="mord mtight">⋅</span><span class="mopen mtight">∥</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3567071428571427em;margin-left:-0.02691em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.14329285714285717em;"><span></span></span></span></span></span></span><span class="mopen mtight">∥</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.60742em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9190928571428572em;"><span style="top:-2.214em;margin-left:-0.02691em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.42488571428571426em;"><span></span></span></span></span></span></span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3567071428571427em;margin-left:-0.02691em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.14329285714285717em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5480799999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.11333499999999996em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9266650000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span><span style="top:-2.886665em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.11333499999999996em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">ρ</span><span class="mord">/</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span></span></span><br>
<img src="https://dong1iu.github.io/post-images/1623063013335.png" alt="" loading="lazy"></p>
<ol>
<li>线性可分告诉我们<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>w</mi><mi>f</mi><mi>T</mi></msubsup><msub><mi>w</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">w_f^Tw_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2605469999999999em;vertical-align:-0.4192159999999999em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4168920000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4192159999999999em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>在增长</li>
<li>错误修正的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>w</mi></mrow><annotation encoding="application/x-tex">w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span></span></span></span>告诉我们<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>w</mi><mi>T</mi></msub></mrow><annotation encoding="application/x-tex">w_T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的模长存在上界</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>w</mi><mi>f</mi><mi>T</mi></msubsup><msub><mi>w</mi><mi>T</mi></msub></mrow><annotation encoding="application/x-tex">w_f^Tw_T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2605469999999999em;vertical-align:-0.4192159999999999em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4168920000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4192159999999999em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的增长一部分依赖<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mo>(</mo><mi>θ</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">cos(\theta)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span></span></span></span>的增长<br>
<img src="https://dong1iu.github.io/post-images/1623063021508.png" alt="" loading="lazy"></li>
</ol>
<h1 id="三-其他pla">三、其他PLA</h1>
<p>Pocket PLA:非线性可分数据的感知器<br>
<img src="https://dong1iu.github.io/post-images/1623063030248.png" alt="" loading="lazy"></p>
<p>优点：可以对近似线形可分的数据集进行处理</p>
<p>缺点：计算量大，每次都要计算所有的点</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Numpy]]></title>
        <id>https://dong1iu.github.io/post/numpy/</id>
        <link href="https://dong1iu.github.io/post/numpy/">
        </link>
        <updated>2021-06-07T04:04:09.000Z</updated>
        <content type="html"><![CDATA[<p>NumPy（Numerical Python的简称）是Python数值计算最重要的基础包。⼤多数提供科学计算的包都是⽤NumPy的数组作为构建基础。</p>
<h1 id="介绍">介绍</h1>
<p>NumPy之于数值计算特别重要的原因之⼀，是因为它可以⾼效处理⼤数组的数据。这是因为：</p>
<p>NumPy是在⼀个连续的内存块中存储数据，独⽴于其他Python内置对象。NumPy的C语⾔编写的算法库可以操作内存，⽽不必进⾏类型检查或其它前期⼯作。⽐起Python的内置序列，NumPy数组使⽤的内存更少。<br>
NumPy可以在整个数组上执⾏复杂的计算，⽽不需要Python的for循环。</p>
<p><strong>总而言之，numpy比list快，而且内存使用更少。</strong></p>
<h1 id="一-ndarray">一、 ndarray</h1>
<ol>
<li>
<p>**创建ndarray （**ones zeros empty ）</p>
<pre><code class="language-python">data1 = [6, 7.5, 8, 0, 1]
arr1 = np.array(data1)
# array([ 6. ,  7.5,  8. ,  0. ,  1. ])

data2 = [[1, 2, 3, 4], [5, 6, 7, 8]]
arr2 = np.array(data2)
# array([[1, 2, 3, 4],
#         5, 6, 7, 8]])
</code></pre>
<p>除非特别说明，np.array会尝试为新建的这个数组推断出⼀个较为合适的数据类型。数据类型保存在⼀个特殊的dtype对象中。</p>
<pre><code class="language-python">In [27]: arr1.dtype
Out[27]: dtype('float64')
</code></pre>
<p><strong>使用其他函数创建数组</strong></p>
<p>ones zeros empty</p>
<pre><code class="language-python">zeros和ones分别可以创建指定⻓度或形状的全0或全1数组。
# zeros
In [29]: np.zeros(10)
Out[29]: array([ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.])
In [30]: np.zeros((3, 6))

</code></pre>
<p>注意：用np.empty()创建0数组是不安全的，它返回的都是⼀些未初始化的垃圾值。即可能是float和int混杂的数组。</p>
<p>arrange</p>
<pre><code class="language-python">In [32]: np.arange(15)
Out[32]: array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14])
</code></pre>
</li>
</ol>
<figure data-type="image" tabindex="1"><img src="https://dong1iu.github.io/post-images/1623039515523.png" alt="" loading="lazy"></figure>
<ol start="2">
<li>
<p><strong>ndarray的数据类型 （<strong>astype</strong>）</strong></p>
<p>为ndarray<strong>指定数据类型</strong></p>
<pre><code class="language-python">arr1 = np.array([1, 2, 3], dtype=np.float64)
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://dong1iu.github.io/post-images/1623039534839.png" alt="" loading="lazy"></figure>
<p><strong>转换dtype</strong></p>
<pre><code class="language-python">float_arr = arr.astype(np.float64)
</code></pre>
<p>如果某字符串数组表示的全是数字，也可以⽤astype将其转换为数值形式</p>
<pre><code class="language-python">In [44]: numeric_strings = np.array(['1.25', '-9.6', '42'], dtype=np.string)
In [45]: numeric_strings.astype(float
</code></pre>
<p>如果转换过程因为某种原因⽽失败了（⽐如某个不能被转换为float64的字符串），就会引发⼀个ValueError</p>
<p>可以引用别的数组的属性来修改你想要的属性</p>
<pre><code class="language-python">In [48]: int_array.astype(calibers.dtype)
</code></pre>
</li>
<li>
<p><strong>NumPy数组的运算</strong></p>
<p>数组很重要，因为它使你不⽤编写循环即可对数据执⾏批量运算。NumPy⽤户称其为⽮量化（vectorization）。⼤⼩相等的数组之间的任何算术运算都会将运算应⽤到元素级</p>
<pre><code class="language-python">arr * arr
arr - arr
</code></pre>
<p>数组与标量的算术运算会将标量值传播到各个元素</p>
<pre><code class="language-python">In [55]: 1 / arr
In [56]: arr ** 0.5
</code></pre>
<p>⼤⼩相同的数组之间的⽐较会⽣成布尔值数组</p>
<pre><code class="language-python">In [59]: arr2 &gt; arr
Out[59]:
array([[False,  True, False],
			[ True, False,  True]], dtype=bool)
</code></pre>
</li>
<li>
<p><strong>⼴播（broadcasting）</strong></p>
<p>不同⼤⼩的数组之间的运算叫做⼴播（broadcasting）</p>
</li>
<li>
<p><strong>基本的索引和切⽚</strong></p>
<p><strong>一维数组</strong></p>
<pre><code class="language-python">In [63]: arr[5:8]
Out[63]: array([5, 6, 7])
</code></pre>
<p>当你将⼀个标量值赋值给⼀个切⽚时（如arr[5:8]=12），该值会⾃动传播，而且这张赋值是会直接改变原数列的。</p>
<p><strong>⾼维度数组</strong></p>
<p>对于⾼维度数组，能做的事情更多。在⼀个⼆维数组中，各索引位置上的元素不再是标量⽽是⼀维数组。</p>
<pre><code class="language-python">In [72]: arr2d = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
In [73]: arr2d[2]
Out[73]: array([7, 8, 9])
</code></pre>
<p>可以传⼊⼀个以逗号隔开的索引列表来选取单个元素。下⾯两种⽅式是等价的：</p>
<pre><code class="language-python">In [74]: arr2d[0][2] 
Out[74]: 3
In [75]: arr2d[0, 2] 
Out[75]: 3
</code></pre>
<p>在2×2×3数组arr3d中：arr3d[0]是⼀个2×3数组：</p>
<pre><code class="language-python">In [76]: arr3d = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])
In [77]: arr3d
Out[77]: 
array([[[ 1,  2,  3],
			[ 4,  5,  6]],
			[[ 7,  8,  9],
			[10, 11, 12]]])
In [78]: arr3d[0] 
Out[78]: 
array([[1, 2, 3],
			[4, 5, 6]])
</code></pre>
<p>标量值和数组都可以被赋值给arr3d[0]：标志值会广播</p>
<figure data-type="image" tabindex="3"><img src="https://dong1iu.github.io/post-images/1623039560105.png" alt="" loading="lazy"></figure>
</li>
<li>
<p><strong>切片索引</strong></p>
<p>一维和列表差不多</p>
<pre><code class="language-python">In [89]: arr[1:6]
Out[89]: array([ 1,  2,  3,  4, 64])
</code></pre>
<p>对于之前的⼆维数组arr2d，其切⽚⽅式稍显不同：</p>
<pre><code class="language-python"># 只输入一个参数时，优先axis0切片
In [92]: arr2d[:2, 1:] 
Out[92]: 
array([[2, 3],
			[5, 6]])
</code></pre>
<p>通过将整数索引和切⽚混合，可以得到低维度的切⽚，例如arr2d[1, :2]和arr2d[:2, 2]。</p>
<figure data-type="image" tabindex="4"><img src="https://dong1iu.github.io/post-images/1623039570171.png" alt="" loading="lazy"></figure>
<p>⾃然，对切⽚表达式的赋值操作也会被扩散到整个选区：</p>
</li>
<li>
<p><strong>布尔型索引</strong></p>
<pre><code class="language-python">In [100]: names
Out[100]: 
array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'],

In [101]: data 
Out[101]: array(7X4)

In [103]: data[names == 'Bob']
Out[103]: 
array([[ 0.0929,  0.2817,  0.769 ,  1.2464],
			[ 1.669 , -0.4386, -0.5397,  0.477 ]])
</code></pre>
<p>布尔型数组的⻓度必须跟被索引的轴⻓度⼀致。此外，还可以将布尔型数组跟切⽚、整数（或整数序列）混合使⽤：</p>
<pre><code class="language-python">In [104]: data[names == 'Bob', 2:]
</code></pre>
<p>要选择除&quot;Bob&quot;以外的其他值，既可以使⽤不等于符号（!=），也可以通过<sub>对条件进⾏否定，</sub>操作符⽤来反转条件很好⽤：</p>
<pre><code class="language-python">In [106]: names != 'Bob'
In [107]: data[~(names == 'Bob')]
</code></pre>
<p>选取这三个名字中的两个需要组合应⽤多个布尔条件，使⽤&amp;（和） |（或）之类的布尔算术运算符即可：</p>
<pre><code class="language-python">In [110]: mask = (names == 'Bob') | (names == 'Will')
</code></pre>
<p>通过布尔型索引选取数组中的数据，将总是创建数据的副本，即使返回⼀模⼀样的数组也是如此。</p>
<p>通过布尔型数组设置值是⼀种经常⽤到的⼿段。</p>
<p>将data中的所有负值都设置为0</p>
<pre><code class="language-python">In [113]: data[data &lt; 0] = 0
</code></pre>
</li>
<li>
<p><strong>花式索引</strong></p>
<p>花式索引（Fancy indexing）是⼀个NumPy术语，它指的是利⽤整数数组进⾏索引。</p>
<p>为了以特定顺序选取⾏⼦集，只需传⼊⼀个⽤于指定顺序的整数列表或ndarray即可：</p>
<figure data-type="image" tabindex="5"><img src="https://dong1iu.github.io/post-images/1623039580571.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="6"><img src="https://dong1iu.github.io/post-images/1623039586105.png" alt="" loading="lazy"></figure>
<p>这段代码确实达到我们的要求了！使⽤负数索引将会从末尾开始选取⾏：</p>
<pre><code class="language-python">In [121]: arr[[-3, -5, -7]]
</code></pre>
<p>⼀次传⼊多个索引数组会有⼀点特别。它返回的是⼀个⼀维数组，其中的元素对应各个索引元组：</p>
<pre><code class="language-python">In [124]: arr[[1, 5, 7, 2], [0, 3, 1, 2]] 
Out[124]: array([ 4, 23, 29, 10])
# 最终选出的是元素(1,0)、(5,3)、(7,1)和(2,2)。⽆论数组是多少维的，花式索引总是⼀维的。
</code></pre>
<p>这个花式索引的⾏为可能会跟某些⽤户的预期不⼀样（包括我在内），选取矩阵的⾏列⼦集应该是矩形区域的形式才对。下⾯是得到该结果的⼀个办法：</p>
<pre><code class="language-python">In [125]: arr[[1, 5, 7, 2]][:, [0, 3, 1, 2]] 
Out[125]: 
array([[ 4,  7,  5,  6],
			[20, 23, 21, 22],
			[28, 31, 29, 30],
			[ 8, 11,  9, 10]])
# 最终选出的是元素(1,0)、(1,3)、(1,1)和(1,2)
# 最终选出的是元素(5,0)、(5,3)、(5,1)和(5,2)
# ...
</code></pre>
</li>
<li>
<p><strong>数组转置和轴对换</strong></p>
<p>转置是重塑的⼀种特殊形式，它返回的是源数据的视图（不会进⾏任何复制操作）。数组不仅有transpose⽅法，还有⼀个特殊的T属性：</p>
<p>在进⾏矩阵计算时，经常需要⽤到该操作，⽐如利⽤np.dot计算矩阵内积：</p>
<pre><code class="language-python"># arr 6X3 返回3X3
In [131]: np.dot(arr.T, arr)
</code></pre>
<p>对于⾼维数组，transpose需要得到⼀个由轴编号组成的元组才能对这些轴进⾏转置（难）：</p>
<pre><code class="language-python">In [134]: arr.transpose((1, 0, 2))
# 第⼀个轴被换成了第⼆个，第⼆个轴被换成了第⼀个，最后⼀个轴不变。
</code></pre>
<p>简单的转置可以使⽤.T，它其实就是进⾏轴对换⽽已。</p>
</li>
</ol>
<h1 id="二-通用函数快速的元素级数组函数">二、<strong>通⽤函数：快速的元素级数组函数</strong></h1>
<ol>
<li>
<p><strong>简介</strong></p>
<p>通⽤函数（即ufunc）是⼀种对ndarray中的数据执⾏元素级运算的函数。可以将其看做简单函数（接受⼀个或多个标量值，并产⽣⼀个或多个标量值）的⽮量化包装器。</p>
</li>
<li>
<p><strong>一元</strong></p>
<pre><code class="language-python"># array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
np.sqrt(arr)
np.exp(arr)
</code></pre>
<p>另外⼀些（如add或maximum）接受2个数组（因此也叫⼆元（binary）ufunc），并返回⼀个结果数组：</p>
</li>
<li>
<p><strong>二元</strong></p>
<pre><code class="language-python">In [141]: x = np.random.randn(8) 
In [142]: y = np.random.randn(8)

In [145]: np.maximum(x, y)
Out[145]: 
array([ 0.8626,  1.0048,  1.3272,  0.6702,  0.853 ,  0.0222,  0.7584,-0.6605])
</code></pre>
<p>这⾥，numpy.maximum计算了x和y中元素级别最⼤的元素。</p>
</li>
<li>
<p><strong>多返回值</strong></p>
<p>虽然并不常⻅，但有些ufunc的确可以返回多个数组。modf就是⼀个例⼦，它是Python内置函数divmod的⽮量化版本，它会返回浮点数数组的⼩数和整数部分：</p>
<pre><code class="language-python">In [148]: remainder, whole_part = np.modf(arr)
</code></pre>
</li>
<li>
<p><strong>ufunc详细表格</strong></p>
<p>Ufuncs可以接受⼀个<strong>out</strong>可选参数，这样就能在数组原地进⾏操作：</p>
<figure data-type="image" tabindex="7"><img src="https://dong1iu.github.io/post-images/1623039600020.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="8"><img src="https://dong1iu.github.io/post-images/1623039604252.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="9"><img src="https://dong1iu.github.io/post-images/1623039611235.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="10"><img src="https://dong1iu.github.io/post-images/1623039615617.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="11"><img src="https://dong1iu.github.io/post-images/1623039619902.png" alt="" loading="lazy"></figure>
</li>
</ol>
<h1 id="三-利用数组进行数据处理">三、<strong>利⽤数组进⾏数据处理</strong></h1>
<ol>
<li>
<p>INTRO</p>
<p>计算函数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msqrt><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msup><mi>y</mi><mn>2</mn></msup></mrow></msqrt></mrow><annotation encoding="application/x-tex">\sqrt{x^2+y^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.24em;vertical-align:-0.2821659999999999em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9578340000000001em;"><span class="svg-align" style="top:-3.2em;"><span class="pstrut" style="height:3.2em;"></span><span class="mord" style="padding-left:1em;"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-2.917834em;"><span class="pstrut" style="height:3.2em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.28em;"><svg width='400em' height='1.28em' viewBox='0 0 400000 1296' preserveAspectRatio='xMinYMin slice'><path d='M263,681c0.7,0,18,39.7,52,119c34,79.3,68.167,
158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120c340,-704.7,510.7,-1060.3,512,-1067
c4.7,-7.3,11,-11,19,-11H40000v40H1012.3s-271.3,567,-271.3,567c-38.7,80.7,-84,
175,-136,283c-52,108,-89.167,185.3,-111.5,232c-22.3,46.7,-33.8,70.3,-34.5,71
c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1s-109,-253,-109,-253c-72.7,-168,-109.3,
-252,-110,-252c-10.7,8,-22,16.7,-34,26c-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26
s76,-59,76,-59s76,-60,76,-60z M1001 80H40000v40H1012z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2821659999999999em;"><span></span></span></span></span></span></span></span></span></p>
<pre><code class="language-python">In [158]: z = np.sqrt(xs ** 2 + ys ** 2)
</code></pre>
</li>
<li>
<p><strong>将条件逻辑表述为数组运算</strong><br>
<strong>numpy.where</strong>函数是三元表达式x if condition else y的⽮量化版本。假设我们有⼀个布尔数组和两个值数组：</p>
<pre><code class="language-python">In [165]: xarr = np.array([1.1, 1.2, 1.3, 1.4, 1.5])
In [166]: yarr = np.array([2.1, 2.2, 2.3, 2.4, 2.5])
In [167]: cond = np.array([True, False, True, True, False])
</code></pre>
<p>假设我们想要根据cond中的值选取xarr和yarr的值：当cond中的值为True时，选取xarr的值，否则从yarr中选取。列表推导式的写法应该如下所示：</p>
<pre><code class="language-python">In [168]: result = [(x if c else y) for x, y, c in zip(xarr, yarr, cond)]
</code></pre>
<p>问题。第⼀，它对⼤数组的处理速度不是很快（因为所有⼯作都是由纯Python完成的）。第⼆，⽆法⽤于多维数组。若使⽤np.where，则可以将该功能写得⾮常简洁：</p>
<pre><code class="language-python">In [170]: result = np.where(cond, xarr, yarr)
In [171]: result
Out[171]: array([ 1.1,  2.2,  1.3,  1.4,  2.5])
</code></pre>
<p>np.where的第⼆个和第三个参数不必是数组，它们都可以是标量值。在数据分析⼯作中，where通常⽤于根据另⼀个数组⽽产⽣⼀个新的数组。</p>
<p>假设有⼀个由随机数据组成的矩阵，你希望将所有正值替换为2，将所有负值替换为－2。若利⽤np.where，则会⾮常简单</p>
<pre><code> ```python
 In [175]: np.where(arr &gt; 0, 2, -2)
 ```
</code></pre>
</li>
<li>
<p><strong>数学统计方法</strong></p>
<p>可以通过数组上的⼀组数学函数对整个数组或某个轴向的数据进⾏统计计算。sum、mean以及标准差std等聚合计算（aggregation，通常叫做约简（reduction））既可以当做数组的实例⽅法调⽤，也可以当做顶级NumPy函数使⽤。</p>
<pre><code class="language-python">In [179]: arr.mean()
In [180]: np.mean(arr)
</code></pre>
<p>mean和sum这类的函数可以接受⼀个axis选项参数，⽤于计算该轴向上的统计值，最终结果是⼀个少⼀维的数组：</p>
<pre><code class="language-python">In [182]: arr.mean(axis=1)
# 沿着axis 1的方向，即加总一行中的每一列
Out[182]: array([ 1.022 ,  0.1875, -0.502 , -0.0881,  0.3611])
</code></pre>
<p>这⾥，arr.mean(1)是“计算⾏的平均值”，arr.sum(0)是“计算每列的和”。</p>
<p>其他如cumsum和cumprod之类的⽅法则不聚合，⽽是产⽣⼀个由中间结果组成的数组：（累加和累乘）</p>
</li>
<li>
<p><strong>基本数组统计方法</strong></p>
<figure data-type="image" tabindex="12"><img src="https://dong1iu.github.io/post-images/1623039628752.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="13"><img src="https://dong1iu.github.io/post-images/1623039633485.png" alt="" loading="lazy"></figure>
</li>
<li>
<p><strong>用于布尔型数组的办法</strong></p>
<p>在上⾯这些⽅法中，布尔值会被强制转换为1（True）和0（False）。因此，sum经常被⽤来对布尔型数组中的True值计数：</p>
<pre><code class="language-python">(arr &gt; 0).sum()
</code></pre>
<p>另外还有两个⽅法any和all，它们对布尔型数组⾮常有⽤。any⽤于测试数组中是否存在⼀个或多个True，⽽all则检查数组中所有值是否都是True：</p>
<pre><code class="language-python">In [192]: bools = np.array([False, False, True, False])
In [193]: bools.any()
Out[193]: True
In [194]: bools.all()
Out[194]: False
</code></pre>
<p>这两个⽅法也能⽤于⾮布尔型数组，所有⾮0元素将会被当做True。</p>
</li>
<li>
<p><strong>排序</strong></p>
<p>跟Python内置的列表类型⼀样，NumPy数组也可以通过sort⽅法<strong>就地</strong>排序：</p>
<pre><code class="language-python">In [195]: arr = np.random.randn(6)
In [196]: arr
Out[196]: array([ 0.6095, -0.4938,  1.24  , -0.1357,  1.43  , -0.8469])
In [197]: arr.sort()
In [198]: arr
Out[198]: array([-0.8469, -0.4938, -0.1357,  0.6095,  1.24  ,  1.43  ])
</code></pre>
<p>多维数组可以在任何⼀个轴向上进⾏排序，只需将轴编号传给sort即可：</p>
<pre><code class="language-python"># 每行排序
In [201]: arr.sort(1)
</code></pre>
<p><strong>顶级⽅法np.sort返回的是数组的已排序副本，⽽就地排序则会修改数组本身。</strong></p>
<p><strong>计算数组分位数</strong>最简单的办法是对其进⾏排序，然后选取特定位置的值：</p>
<pre><code class="language-python">In [205]: large_arr[int(0.05 * len(large_arr))] # 5% quantile Out[205]: -1.5311513550102103
</code></pre>
</li>
<li>
<p><strong>唯⼀化以及其它的集合逻辑</strong></p>
<p>最常⽤的可能要数np.unique，⽤于找出数组中的唯⼀值并返回已排序的结果：</p>
<pre><code class="language-python">np.unique(names)
</code></pre>
<p>函数np.in1d⽤于测试⼀个数组中的值在另⼀个数组中的成员资格，返回⼀个布尔型数组：</p>
<pre><code class="language-python">In [211]: values = np.array([6, 0, 0, 3, 2, 5, 6])
In [212]: np.in1d(values, [2, 3, 6])
Out[212]: array([ True, False, False,  True,  True, False,  True], dtype=bool)
</code></pre>
<figure data-type="image" tabindex="14"><img src="https://dong1iu.github.io/post-images/1623039647900.png" alt="" loading="lazy"></figure>
</li>
<li>
<p><strong>线性代数</strong></p>
<p>矩阵乘法x.dot(y)等价于np.dot(x, y)</p>
<p>⼀个⼆维数组跟⼀个⼤⼩合适的⼀维数组的矩阵点积运算之后将会得到⼀个⼀维数组：</p>
<pre><code class="language-python">In [223]: x = np.array([[1., 2., 3.], [4., 5., 6.]])
In [229]: np.dot(x, np.ones(3)) 
Out[229]: array([  6.,  15.])
# 发生了自动转置
</code></pre>
<p>@符（类似Python 3.5）也可以⽤作中缀运算符，进⾏矩阵乘法：</p>
<pre><code class="language-python">In [230]: x @ np.ones(3) 
Out[230]: array([  6.,  15.])
</code></pre>
<p>numpy.linalg中有⼀组标准的矩阵分解运算以及诸如求逆和⾏列式之类的东⻄。</p>
<figure data-type="image" tabindex="15"><img src="https://dong1iu.github.io/post-images/1623039655233.png" alt="" loading="lazy"></figure>
</li>
<li>
<p><strong>伪随机数⽣成</strong></p>
<p>numpy.random模块对Python内置的random进⾏了补充，增加了⼀些⽤于⾼效⽣成多种概率分布的样本值的函数。</p>
<p>你可以⽤normal来得到⼀个标准正态分布的4×4样本数组：</p>
<pre><code class="language-python">In [238]: samples = np.random.normal(size=(4, 4))
</code></pre>
<p>我们说这些都是伪随机数，是因为它们都是通过算法基于随机数⽣成器种⼦，在确定性的条件下⽣成的。你可以⽤NumPy的np.random.seed更改随机数⽣成种⼦：</p>
<pre><code class="language-python">In [244]: np.random.seed(1234)
</code></pre>
<p>numpy.random的数据⽣成函数使⽤了全局的随机种⼦。要避免全局状态，你可以使⽤numpy.random.RandomState，创建⼀个与其它隔离的随机数⽣成器：</p>
<pre><code class="language-python">In [245]: rng = np.random.RandomState(1234)
In [246]: rng.randn(10)
</code></pre>
</li>
</ol>
<figure data-type="image" tabindex="16"><img src="https://dong1iu.github.io/post-images/1623039661898.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="17"><img src="https://dong1iu.github.io/post-images/1623039665949.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MAC终端代理]]></title>
        <id>https://dong1iu.github.io/post/mac-zhong-duan-dai-li/</id>
        <link href="https://dong1iu.github.io/post/mac-zhong-duan-dai-li/">
        </link>
        <updated>2021-05-28T07:00:16.000Z</updated>
        <content type="html"><![CDATA[<p>MAC下终端走代理的有多种方法</p>
<ol>
<li>临时代理</li>
</ol>
<p><code>export http_proxy='http://localhost:8001'</code></p>
<ol start="2">
<li>永久代理</li>
</ol>
<p>修改环境变量<br>
<code>vim ~/.zshrc</code></p>
<pre><code class="language-bash"># 添加以下内容
# proxy 
export http_proxy='http://localhost:8001'
export https_proxy='http://localhost:8001'
</code></pre>
<ol start="3">
<li>灵活开启</li>
</ol>
<p>修改环境变量<br>
<code>vim ~/.zshrc</code></p>
<pre><code># proxy
alias proxy='export all_proxy=http://127.0.0.1:8001'  # 可在网络设置中查看
alias unproxy='unset all_proxy'
</code></pre>
<p>需要启用代理时，在终端输入<code>proxy</code>，关闭代理时，输入<code>unproxy</code>。</p>
<blockquote>
<p>检测是否成功代理</p>
</blockquote>
<p><code>curl cip.cc</code></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MAC下为所有人安装anaconda3]]></title>
        <id>https://dong1iu.github.io/post/mac-xia-wei-suo-you-ren-an-zhuang-anaconda3/</id>
        <link href="https://dong1iu.github.io/post/mac-xia-wei-suo-you-ren-an-zhuang-anaconda3/">
        </link>
        <updated>2021-05-28T03:10:54.000Z</updated>
        <content type="html"><![CDATA[<h2 id="下载安装包">下载安装包</h2>
<ol>
<li>在<a href="https://repo.anaconda.com/archive/">官网档案</a>下载</li>
<li>在<a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/">清华镜像源</a>下载</li>
<li>直接下载<a href="https://repo.anaconda.com/archive/Anaconda3-2021.05-MacOSX-x86_64.pkg">2021年5月 Python3.8版本</a></li>
</ol>
<h2 id="安装anaconda3">安装anaconda3</h2>
<p>安装过程中，选择为所有人安装</p>
<h2 id="添加环境变量">添加环境变量</h2>
<ol>
<li>确认anaconda3的安装位置，一般在<code>/opt/anaconda3/bin</code></li>
<li>添加环境变量</li>
</ol>
<p><code>vim ~/.zshrc</code></p>
<pre><code class="language-bash"> export PATH=&quot;/opt/anaconda3/bin:$PATH&quot;
</code></pre>
<p><code>source ~/.zshrc</code></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Ubuntu防火墙管理]]></title>
        <id>https://dong1iu.github.io/post/ubuntu-fang-huo-qiang-guan-li/</id>
        <link href="https://dong1iu.github.io/post/ubuntu-fang-huo-qiang-guan-li/">
        </link>
        <updated>2021-05-28T02:25:01.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>系统版本: ubuntu18.04</p>
</blockquote>
<h2 id="查看防火墙当前状态">查看防火墙当前状态</h2>
<p><code>sudo ufw status</code></p>
<h2 id="开启防火墙">开启防火墙</h2>
<blockquote>
<p>开启时请以前打开22端口的权限，否则无法ssh到机器</p>
</blockquote>
<p><code>sudo ufw enable</code></p>
<h2 id="ufw启用关闭重载">ufw启用/关闭/重载</h2>
<p><code>ufw enable/disable/reload</code></p>
<h2 id="允许外部访问80端口">允许外部访问80端口</h2>
<p><code>sudo ufw allow 80</code></p>
<h2 id="禁止外部访问80端口">禁止外部访问80端口</h2>
<p><code>sudo ufw delete allow 80</code></p>
<h2 id="允许此ip访问所有的本机端口">允许此IP访问所有的本机端口</h2>
<p><code>sudo ufw allow from 192.168.1.1</code></p>
<h2 id="禁止外部访问smtp服务">禁止外部访问smtp服务</h2>
<p><code>sudo ufw deny smtp</code></p>
<h2 id="安装ufw">安装ufw</h2>
<p><code>sudo apt-get install ufw</code></p>
]]></content>
    </entry>
</feed>